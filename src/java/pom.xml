<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.fiware</groupId>
    <artifactId>canis-major</artifactId>
    <version>1.0.0</version>

    <parent>
        <groupId>io.micronaut</groupId>
        <artifactId>micronaut-parent</artifactId>
        <version>3.2.7</version>
    </parent>

    <developers>
        <developer>
            <name>${project.author.name}</name>
            <email>${project.author.email}</email>
        </developer>
    </developers>

    <description>${project.description}</description>
    <url>${project.url}</url>
    <licenses>
        <license>
            <name>${project.license.name}</name>
            <url>${project.license.url}</url>
        </license>
    </licenses>


    <properties>
        <jdk.version>17</jdk.version>
        <release.version>17</release.version>
        <micronaut.version>3.2.7</micronaut.version>
        <micronaut.configuration.version>1.3.1</micronaut.configuration.version>

        <!-- project info -->
        <project.author.name>Stefan Wiedemann</project.author.name>
        <project.author.email>stefan.wiedemann@fiware.org</project.author.email>
        <project.description>CanisMajor is a blockchain adaptor that supports various DLT, the adaptor aims to submit the data to DLT using FIWARE Technologies.</project.description>
        <project.summary>NGSI-LD DLT adaptor.</project.summary>
        <project.url>https://github.com/FIWARE/CanisMajor</project.url>
        <project.license.name>GNU Affero General Public License v3.0</project.license.name>
        <project.license.identifier>AGPL-3.0-only</project.license.identifier>
        <project.license.url>https://www.gnu.org/licenses/agpl.txt</project.license.url>
        <project.title>FIWARE CanisMajor</project.title>
        <project.vendor>FIWARE Foundation, e.V.</project.vendor>
        <project.contact.domain>fiware.org</project.contact.domain>
        <project.contact.email>stefan.wiedemann@fiware.org</project.contact.email>

        <!-- docker -->
        <exec.mainClass>org.fiware.canismajor.Application</exec.mainClass>
        <image.registry>docker.io</image.registry>
        <image.repository>fiware</image.repository>
        <image.tag>latest</image.tag>

        <!-- DLT -->
        <version.org.web3j.core>4.8.7</version.org.web3j.core>

        <!-- lazy dev -->
        <version.org.mapstruct>1.4.2.Final</version.org.mapstruct>
        <version.org.projectlombok>1.18.22</version.org.projectlombok>

        <!-- logging -->
        <version.ch.qos.logback>1.2.3</version.ch.qos.logback>

        <!-- code gen -->
        <version.org.openapitools.generator-maven-plugin>5.1.0</version.org.openapitools.generator-maven-plugin>
        <version.io.kokuwa.micronaut.codegen>2.2.1</version.io.kokuwa.micronaut.codegen>

        <!-- test -->
        <version.org.testcontainers>1.15.1</version.org.testcontainers>
        <version.org.mockito.mockito-all>1.10.19</version.org.mockito.mockito-all>
        <version.org.mockito.mockito-junit-jupiter>4.2.0</version.org.mockito.mockito-junit-jupiter>
        <version.org.awaitility>4.0.3</version.org.awaitility>
        <version.org.jacoco.maven-plugin>0.8.7</version.org.jacoco.maven-plugin>
        <version.org.eluder.coveralls.maven-plugin>2.2.0</version.org.eluder.coveralls.maven-plugin>
        <version.com.github.spotbugs.maven-plugin>4.5.2.0</version.com.github.spotbugs.maven-plugin>
        <version.org.apache.maven.plugins.maven-site-plugin>3.9.1</version.org.apache.maven.plugins.maven-site-plugin>
        <version.org.apache.maven.plugins.maven-javadoc-plugin>3.2.0</version.org.apache.maven.plugins.maven-javadoc-plugin>
        <version.com.google.code.findbugs.annotations>3.0.1u2</version.com.google.code.findbugs.annotations>
        <coveralls.token>myToken</coveralls.token>
        <jacoco.reportFolder>${project.build.directory}/site/jacoco</jacoco.reportFolder>
        <jacoco.utReportFile>${jacoco.reportFolder}/test.exec</jacoco.utReportFile>
        <spotbugs.reportFolder>${project.build.directory}/site/spotbugs</spotbugs.reportFolder>

    </properties>

    <dependencies>

        <!-- lazy dev -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${version.org.projectlombok}</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${version.org.mapstruct}</version>
        </dependency>

        <!-- micronaut -->
        <dependency>
            <groupId>io.micronaut</groupId>
            <artifactId>micronaut-inject</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.micronaut</groupId>
            <artifactId>micronaut-validation</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.micronaut</groupId>
            <artifactId>micronaut-http-server-netty</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.graalvm.nativeimage</groupId>
            <artifactId>svm</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>io.micronaut</groupId>
            <artifactId>micronaut-runtime</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.micronaut</groupId>
            <artifactId>micronaut-management</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micronaut.cache</groupId>
            <artifactId>micronaut-cache-caffeine</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micronaut.configuration</groupId>
            <artifactId>micronaut-micrometer-core</artifactId>
            <version>${micronaut.configuration.version}</version>
        </dependency>
        <dependency>
            <groupId>io.micronaut.configuration</groupId>
            <artifactId>micronaut-micrometer-registry-prometheus</artifactId>
            <version>${micronaut.configuration.version}</version>
        </dependency>

        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <version>1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.reactivex.rxjava2/rxjava -->
        <dependency>
            <groupId>io.reactivex.rxjava2</groupId>
            <artifactId>rxjava</artifactId>
            <version>2.2.21</version>
        </dependency>

        <!-- DLT -->
        <dependency>
            <groupId>org.web3j</groupId>
            <artifactId>core</artifactId>
            <version>${version.org.web3j.core}</version>
        </dependency>

        <!-- logging -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- DB -->
        <dependency>
            <groupId>io.micronaut.sql</groupId>
            <artifactId>micronaut-jdbc-tomcat</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.persistence</groupId>
            <artifactId>javax.persistence-api</artifactId>
            <version>2.2</version>
        </dependency>
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
            <version>3.0.0</version>
        </dependency>
        <dependency>
            <groupId>jakarta.transaction</groupId>
            <artifactId>jakarta.transaction-api</artifactId>
            <version>1.3.3</version>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micronaut.data</groupId>
            <artifactId>micronaut-data-jdbc</artifactId>
        </dependency>

        <!-- testing -->
        <dependency>
            <groupId>io.micronaut</groupId>
            <artifactId>micronaut-http-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.micronaut.test</groupId>
            <artifactId>micronaut-test-junit5</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <version>${version.org.testcontainers}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${version.org.testcontainers}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>${version.org.mockito.mockito-all}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${version.org.mockito.mockito-junit-jupiter}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <version>${version.org.awaitility}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>annotations</artifactId>
            <version>${version.com.google.code.findbugs.annotations}</version>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <!-- generate sources from openapi spec -->
            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <version>${version.org.openapitools.generator-maven-plugin}</version>
                <executions>
                    <execution>
                        <id>canis-major-api</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>../../api/api.yaml</inputSpec>
                            <apiPackage>org.fiware.canismajor.api</apiPackage>
                            <strictSpec>true</strictSpec>
                            <modelPackage>org.fiware.canismajor.model</modelPackage>
                            <generateAliasAsModel>true</generateAliasAsModel>
                            <generatorName>micronaut</generatorName>
                            <modelNameSuffix>VO</modelNameSuffix>
                            <output>${project.build.directory}</output>
                            <configOptions>
                                <fullJavaUtil>true</fullJavaUtil>
                                <useGenericResponse>true</useGenericResponse>
                                <useReferencedSchemaAsDefault>true</useReferencedSchemaAsDefault>
                                <useLombokGenerated>true</useLombokGenerated>
                                <introspected>true</introspected>
                                <useBeanValidation>false</useBeanValidation>
                                <jacksonDatabindNullable>false</jacksonDatabindNullable>
                            </configOptions>
                            <typeMappings>
                                <typeMapping>java.util.Date=java.time.Instant</typeMapping>
                            </typeMappings>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>io.kokuwa.micronaut</groupId>
                        <artifactId>micronaut-openapi-codegen</artifactId>
                        <version>${version.io.kokuwa.micronaut.codegen}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <!-- add generated sources -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>openapi-sources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/generated-sources/openapi</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>openapi-test-sources</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/generated-test-sources/openapi</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.micronaut.build</groupId>
                <artifactId>micronaut-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <!-- Uncomment to enable incremental compilation -->
                    <!-- <useIncrementalCompilation>false</useIncrementalCompilation> -->
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${version.org.projectlombok}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${version.org.mapstruct}</version>
                        </path>
                        <path>
                            <groupId>io.micronaut</groupId>
                            <artifactId>micronaut-inject-java</artifactId>
                            <version>${micronaut.version}</version>
                        </path>
                        <path>
                            <groupId>io.micronaut</groupId>
                            <artifactId>micronaut-validation</artifactId>
                            <version>${micronaut.version}</version>
                        </path>
                        <path>
                            <groupId>io.micronaut</groupId>
                            <artifactId>micronaut-graal</artifactId>
                            <version>${micronaut.version}</version>
                        </path>
                        <path>
                            <groupId>io.micronaut.data</groupId>
                            <artifactId>micronaut-data-processor</artifactId>
                            <version>${micronaut.data.version}</version>
                        </path>
                    </annotationProcessorPaths>
                    <compilerArgs>
                        <arg>-Amicronaut.processing.group=org.fiware</arg>
                        <arg>-Amicronaut.processing.module=canismajor</arg>
                    </compilerArgs>
                </configuration>
                <executions>
                    <execution>
                        <id>test-compile</id>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                        <configuration>
                            <annotationProcessorPaths>
                                <path>
                                    <groupId>org.projectlombok</groupId>
                                    <artifactId>lombok</artifactId>
                                    <version>${version.org.projectlombok}</version>
                                </path>
                                <path>
                                    <groupId>org.mapstruct</groupId>
                                    <artifactId>mapstruct-processor</artifactId>
                                    <version>${version.org.mapstruct}</version>
                                </path>
                                <path>
                                    <groupId>io.micronaut</groupId>
                                    <artifactId>micronaut-inject-java</artifactId>
                                    <version>${micronaut.version}</version>
                                </path>
                                <path>
                                    <groupId>io.micronaut</groupId>
                                    <artifactId>micronaut-validation</artifactId>
                                    <version>${micronaut.version}</version>
                                </path>
                                <path>
                                    <groupId>io.micronaut</groupId>
                                    <artifactId>micronaut-graal</artifactId>
                                    <version>${micronaut.version}</version>
                                </path>
                                <path>
                                    <groupId>io.micronaut.data</groupId>
                                    <artifactId>micronaut-data-processor</artifactId>
                                    <version>${micronaut.data.version}</version>
                                </path>
                            </annotationProcessorPaths>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>org.fiware.canismajor.Application</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <!-- copy project dependencies -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>micronaut-lib</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <includeScope>runtime</includeScope>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <silent>true</silent>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!-- required for mockito -->
                    <argLine>@{argLine} --add-opens java.base/java.lang=ALL-UNNAMED</argLine>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${version.org.jacoco.maven-plugin}</version>
                <configuration>
                    <!-- exclude generated code -->
                    <excludes>
                        <exclude>org/fiware/canismajor/api/**/*</exclude>
                        <exclude>org/fiware/canismajor/model/**/*</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <id>pre-unit-tests</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${jacoco.utReportFile}</destFile>
                        </configuration>
                    </execution>
                    <!-- Ensures that the code coverage report for unit tests is created after unit tests have been run -->
                    <execution>
                        <id>post-unit-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${jacoco.utReportFile}</dataFile>
                            <outputDirectory>${jacoco.reportFolder}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.eluder.coveralls</groupId>
                <artifactId>coveralls-maven-plugin</artifactId>
                <version>${version.org.eluder.coveralls.maven-plugin}</version>
                <configuration>
                    <repoToken>${coveralls.token}</repoToken>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>${version.org.apache.maven.plugins.maven-site-plugin}</version>
            </plugin>
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <version>${version.com.github.spotbugs.maven-plugin}</version>
                <configuration>
                    <xmlOutput>true</xmlOutput>
                    <failOnError>false</failOnError>
                    <xmlOutputDirectory>${spotbugs.reportFolder}</xmlOutputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${version.org.apache.maven.plugins.maven-javadoc-plugin}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>docker</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.google.cloud.tools</groupId>
                        <artifactId>jib-maven-plugin</artifactId>
                        <!-- disables the micronaut plugin extension, that breaks the exectuion individual config -->
                        <configuration combine.self="override">
                            <from>
                                <image>registry.access.redhat.com/ubi8/openjdk-17:1.10-5</image>
                            </from>
                            <to>
                                <image>${image.registry}/${image.repository}/${artifactId}</image>
                                <tags>
                                    <tag>${image.tag}</tag>
                                    <tag>latest</tag>
                                </tags>
                            </to>
                            <extraDirectories>
                                <paths>
                                    <path>
                                        <from>license</from>
                                        <into>/licenses</into>
                                    </path>
                                </paths>
                            </extraDirectories>
                            <container>
                                <labels>
                                    <!-- oci labels -->
                                    <org.opencontainers.image.authors>${project.author.name} - ${project.author.email}</org.opencontainers.image.authors>
                                    <org.opencontainers.image.description>${project.description}</org.opencontainers.image.description>
                                    <org.opencontainers.image.documentation>${project.url}</org.opencontainers.image.documentation>
                                    <org.opencontainers.image.licenses>${project.license.identifier}</org.opencontainers.image.licenses>
                                    <org.opencontainers.image.source>${project.url}</org.opencontainers.image.source>
                                    <org.opencontainers.image.title>${project.title}</org.opencontainers.image.title>
                                    <org.opencontainers.image.vendor>${project.vendor}</org.opencontainers.image.vendor>
                                    <org.opencontainers.image.version>${project.version}</org.opencontainers.image.version>
                                    <org.opencontainers.image.created>${maven.build.timestamp}</org.opencontainers.image.created>
                                    <org.fiware.contact.localpart>${project.contact.email}</org.fiware.contact.localpart>
                                    <org.fiware.contact.domain>${project.contact.domain}</org.fiware.contact.domain>
                                    <!-- redhat required labels -->
                                    <name>${project.title}</name>
                                    <description>${project.description}</description>
                                    <authors>${project.author.name} - ${project.author.email}</authors>
                                    <maintainer>${project.author.email}</maintainer>
                                    <documentation>${project.url}</documentation>
                                    <vendor>${project.vendor}</vendor>
                                    <summary>${project.summary}</summary>
                                </labels>
                            </container>
                        </configuration>
                        <executions>
                            <execution>
                                <id>deploy</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>install</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>dockerBuild</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>com.rodiontsev.maven.plugins</groupId>
                        <artifactId>build-info-maven-plugin</artifactId>
                        <version>1.2</version>
                        <configuration>
                            <filename>classes/META-INF/build-info.properties</filename>
                            <projectProperties>
                                <projectProperty>project.groupId</projectProperty>
                                <projectProperty>project.artifactId</projectProperty>
                                <projectProperty>project.version</projectProperty>
                            </projectProperties>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>extract</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>

