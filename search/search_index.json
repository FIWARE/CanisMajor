{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"CanisMajor - FIWARE DLT Adaptor In order to persist transactions inside the blockchain, a client has to send information about its transactions(e.g. create/update/delete entity) to CanisMajor. The request should include information about the Wallet(e.g. Keystore) to be used for signing the transaction. Please check the API (tag NGIS-LD ) on how to send the transactions and provide the Wallet-Information. CanisMajor will create a Merkle-Tree from the send informations and include it as data into the transaction for the Blockchain. In order to properly sign the transaction, CanisMajor uses the provided Wallet-Information and delegates the signing to the client's Wallet. The signed transaction is then put into the Oketh-compatible blockchain. Testing Run unit-tests via: mvn clean test A set of integration tests(using cucumber ) is available under it/ ). To run them use: cd it docker-compose -f docker-compose/docker-compose-env.yaml -f docker-compose/docker-compose-java.yaml up mvn clean test ADRs Delegate transaction signing to the client License CanisMajor is licensed under the Apache License, Version 2.0. See LICENSE for the full license text. \u00a9 2021 FIWARE Foundation e.V.","title":"Home"},{"location":"index.html#canismajor-fiware-dlt-adaptor","text":"In order to persist transactions inside the blockchain, a client has to send information about its transactions(e.g. create/update/delete entity) to CanisMajor. The request should include information about the Wallet(e.g. Keystore) to be used for signing the transaction. Please check the API (tag NGIS-LD ) on how to send the transactions and provide the Wallet-Information. CanisMajor will create a Merkle-Tree from the send informations and include it as data into the transaction for the Blockchain. In order to properly sign the transaction, CanisMajor uses the provided Wallet-Information and delegates the signing to the client's Wallet. The signed transaction is then put into the Oketh-compatible blockchain.","title":"CanisMajor - FIWARE DLT Adaptor"},{"location":"index.html#testing","text":"Run unit-tests via: mvn clean test A set of integration tests(using cucumber ) is available under it/ ). To run them use: cd it docker-compose -f docker-compose/docker-compose-env.yaml -f docker-compose/docker-compose-java.yaml up mvn clean test","title":"Testing"},{"location":"index.html#adrs","text":"Delegate transaction signing to the client","title":"ADRs"},{"location":"index.html#license","text":"CanisMajor is licensed under the Apache License, Version 2.0. See LICENSE for the full license text. \u00a9 2021 FIWARE Foundation e.V.","title":"License"},{"location":"api.html","text":"APIs All APIs supported by CanisMajor can be found in the OpenApi-Spec . It essentially consists of 3 types(seperated by tag): * Ops - basic APIs to support the operation of CanisMajor * NGSI-LD - NGSI-LD related endpoints to persist transactions * Entity - endpoints to retrieve transaction information, based on the enities they relate to Check the spec for dedicated information.","title":"APIs"},{"location":"api.html#apis","text":"All APIs supported by CanisMajor can be found in the OpenApi-Spec . It essentially consists of 3 types(seperated by tag): * Ops - basic APIs to support the operation of CanisMajor * NGSI-LD - NGSI-LD related endpoints to persist transactions * Entity - endpoints to retrieve transaction information, based on the enities they relate to Check the spec for dedicated information.","title":"APIs"},{"location":"installation.html","text":"Run To run CanisMajor via docker, use: docker run quay.io/fiware/canismajor A full setup, including the context broker, a development-mock eth-node , the used contract and Vault as a wallet can be setup via: docker-compose -f it/docker-compose/docker-compose-env.yaml -f it/docker-compose/docker-compose-java.yaml up","title":"Installation"},{"location":"installation.html#run","text":"To run CanisMajor via docker, use: docker run quay.io/fiware/canismajor A full setup, including the context broker, a development-mock eth-node , the used contract and Vault as a wallet can be setup via: docker-compose -f it/docker-compose/docker-compose-env.yaml -f it/docker-compose/docker-compose-java.yaml up","title":"Run"},{"location":"adrs/delegate-signatur.html","text":"Delegate transaction signing to the client's wallet Status implemented Context In order to allow verification of the transaction in the blockchain, the responsible account has to be provided. This happens by signing the transaction with the accounts private-key. Decision The signing is delegated to a \"Wallet\"(e.g. Keystore) in the domain of the client and can be specified per request to CanisMajor. Rational the private key should never leave its owner the concrete wallet implementation is up to the client and therefore interchangeable","title":"Delegate transaction signing to the client's wallet"},{"location":"adrs/delegate-signatur.html#delegate-transaction-signing-to-the-clients-wallet","text":"","title":"Delegate transaction signing to the client's wallet"},{"location":"adrs/delegate-signatur.html#status","text":"implemented","title":"Status"},{"location":"adrs/delegate-signatur.html#context","text":"In order to allow verification of the transaction in the blockchain, the responsible account has to be provided. This happens by signing the transaction with the accounts private-key.","title":"Context"},{"location":"adrs/delegate-signatur.html#decision","text":"The signing is delegated to a \"Wallet\"(e.g. Keystore) in the domain of the client and can be specified per request to CanisMajor.","title":"Decision"},{"location":"adrs/delegate-signatur.html#rational","text":"the private key should never leave its owner the concrete wallet implementation is up to the client and therefore interchangeable","title":"Rational"},{"location":"adrs/envoy-as-proxy.html","text":"Use envoy as proxy Status implemented Context A proxy for handling and forwarding the incoming requests is required. Decision The proxy to be used will be envoy . Rational is maintained by a wide community, most notably the CNCF , Lyft and Google . is build for cloud purposes very fast according to various benchmarks, thus limiting the impact on the broker performance support for proxy-wasm, to enable easy integration of the filter integration into service-meshs, like OSSM and Istio , possible","title":"Use envoy as proxy"},{"location":"adrs/envoy-as-proxy.html#use-envoy-as-proxy","text":"","title":"Use envoy as proxy"},{"location":"adrs/envoy-as-proxy.html#status","text":"implemented","title":"Status"},{"location":"adrs/envoy-as-proxy.html#context","text":"A proxy for handling and forwarding the incoming requests is required.","title":"Context"},{"location":"adrs/envoy-as-proxy.html#decision","text":"The proxy to be used will be envoy .","title":"Decision"},{"location":"adrs/envoy-as-proxy.html#rational","text":"is maintained by a wide community, most notably the CNCF , Lyft and Google . is build for cloud purposes very fast according to various benchmarks, thus limiting the impact on the broker performance support for proxy-wasm, to enable easy integration of the filter integration into service-meshs, like OSSM and Istio , possible","title":"Rational"},{"location":"adrs/transparent-proxy.html","text":"Use a transparent proxy for forward data to CanisMajor Status implemented Context In order for CanisMajor to persist NGSI-LD requests, a mechanism to forward them is required. Decision A transparent proxy, using the sidecar pattern, is used to intercept and forward the requests. Rational transparent integration into the request chain no influence on the decision for other components, f.e. which pep-proxy to use can be used for enforcing CanisMajor to accept ever request","title":"Use a transparent proxy for forward data to CanisMajor"},{"location":"adrs/transparent-proxy.html#use-a-transparent-proxy-for-forward-data-to-canismajor","text":"","title":"Use a transparent proxy for forward data to CanisMajor"},{"location":"adrs/transparent-proxy.html#status","text":"implemented","title":"Status"},{"location":"adrs/transparent-proxy.html#context","text":"In order for CanisMajor to persist NGSI-LD requests, a mechanism to forward them is required.","title":"Context"},{"location":"adrs/transparent-proxy.html#decision","text":"A transparent proxy, using the sidecar pattern, is used to intercept and forward the requests.","title":"Decision"},{"location":"adrs/transparent-proxy.html#rational","text":"transparent integration into the request chain no influence on the decision for other components, f.e. which pep-proxy to use can be used for enforcing CanisMajor to accept ever request","title":"Rational"}]}